lr_time = lr$time
gbm = train_gbm(df_train)
save(lr, file = '../output/lr.fit.LBP')
save(lr, file = '../output/lr.fit.LBP.Rdata')
save(lr, file = '../output/gbm.fit.LBP.Rdata')
train_gbm_accuracy = mean(test_gbm(gbm,df_train) == df_train$Label)
test_gbm_accuracy = mean(test_gbm(gbm,df_test) == df_test$Label)
rf = train_rf(df_train)
train_rf_accuracy = mean(test(rf,df_train) == df_train$Label)
test_rf_accuracy = mean(test(rf,df_test) == df_test$Label)
save(lr, file = '../output/rf.fit.LBP.Rdata')
svm = train_svm(df_train)
save(lr, file = '../output/svm.fit.LBP.Rdata')
train_svm_accuracy = mean(test(svm,df_train) == df_train$Label)
test_svm_accuracy = mean(test(svm,df_test) == df_test$Label)
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
install.packages('DMwR')
install.packages('DMwR')
library(DMwR)
library(caTools)
library(EBImage)
library(mxnet)
library(pbapply)
library(DMwR)
source("../lib/train.R")
source("../lib/test.R")
setwd("~/Documents/GitHub/Fall2017-project3-fall2017-project3-grp4/doc")
source("../lib/train.R")
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
#library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(OpenImageR)
install.packages("OpenImageR")
install.packages("OpenImageR")
library(DT)
install.packages("DT")
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
library(EBImage)
library(mxnet)
library(pbapply)
source("../lib/train.R")
library(caTools)
library(EBImage)
library(mxnet)
library(pbapply)
library(DT)
source("../lib/train.R")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/train_test_split.R")
df = train_test_split("sift")
setwd("~/Documents/GitHub/Fall2017-project3-fall2017-project3-grp4/doc")
source("../lib/train_test_split.R")
df = train_test_split("sift")
Sift_train = df$df_train
df = train_test_split("sift")
source("../lib/train_test_split.R")
df = train_test_split("sift")
baseline.result = train_gbm(Sift_train)
load("../output/baseline.result.Rdata")
baseline.time = baseline.result[[4]]
baseline.time
baseline.accuracy = 1 - baseline.result[[3]]
print(paste0("The accuracy rate of baseline model is ", baseline.accuracy))
df = train_test_split("lbp")
LBP_train = df$df_train
LBP_test = df$df_test
# LBP + Random Forest
rf.fit.LBP = train_rf(LBP_train)
load("../output/lbp.result.Rdata")
lbp.result
load("../output/hog.para.accuracy.Rdata")
hog.para.accuracy
df = train_test_split("hog510")
HoG_train = df $ df_train
HoG_test = df$df_test
load("../output/hog.result.Rdata")
hog.result
lbp.result$Feature<- 'LBP'
hog.result$Feature<- 'HoG'
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
library(ggplot2)
library(ggthemes)
install.packages('ggthemes')
lbp.result$Feature<- 'LBP'
hog.result$Feature<- 'HoG'
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
par(mfrow=c(1,2))
ggplot(comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge())+
#theme_solarized(light = T)+
ylim(0, 1.2)
ggplot(comp, aes(x=Model,y=Running_Time,color=Feature,group=Feature)) +
geom_line()+
theme_solarized(light = T)
lbp.result$Feature<- 'LBP'
hog.result$Feature<- 'HoG'
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
par(mfrow=c(1,2))
ggplot(comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge())+
#theme_solarized(light = T)+
ylim(0, 1.2)
ggplot(comp, aes(x=Model,y=Running_Time,color=Feature,group=Feature)) +
geom_line()+
#theme_solarized(light = T)
library(DT)
library(DMwR)
lbp.result$Feature<- 'LBP'
hog.result$Feature<- 'HoG'
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
par(mfrow=c(1,2))
ggplot(comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge())+
theme_solarized(light = T)+
ylim(0, 1.2)
library(ggthemes)
lbp.result$Feature<- 'LBP'
hog.result$Feature<- 'HoG'
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
par(mfrow=c(1,2))
ggplot(comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge())+
theme_solarized(light = T)+
ylim(0, 1.2)
ggplot(comp, aes(x=Model,y=Running_Time,color=Feature,group=Feature)) +
geom_line()+
theme_solarized(light = T)
comp<-rbind(comp,c("GBM","Sift",1-baseline.result[[2]],
1-baseline.result[[3]],baseline.result[[4]]))
comp<-rbind(comp,c("CNN","NULL",1,1,1))
comp$Parameters<-c("Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"gbm","Layer=")
library(DT)
datatable(comp)
View(comp)
datatable(comp)
View(comp)
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
source('../output/cnn_feature.R')
setwd("~/Documents/GitHub/Fall2017-project3-fall2017-project3-grp4/doc")
source('../output/cnn_feature.R')
source('../lib/cnn_feature.R')
df_cnn = data.frame(training_error = 0.963, test_error = 0.842, running_time = c('32min') )
View(df_cnn)
save(df_cnn, '../output/cnn.test.Rdata')
save(df_cnn, file = '../output/cnn.test.Rdata')
load(file = '../output/cnn.test.Rdata')
df_cnn
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
library(EBImage)
library(mxnet)
library(pbapply)
library(ggthemes)
packages.used=c("caret","gbm", "e1071", "DMwR", "nnet", "randomForest","OpenImageR","DT", "caTools", "EBImage", "mxnet", "pbapply", "ggthemes")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(e1071)
library(DMwR)
library(randomForest)
library(nnet)
library(OpenImageR)
library(DT)
library(caTools)
library(EBImage)
library(mxnet)
library(pbapply)
library(ggthemes)
source("../lib/train.R")
source("../lib/test.R")
source("../lib/train_test_split.R")
df = train_test_split("lbp")
df = train_test_split("lbp")
load("lbp.result.Rdata")
setwd("~/Documents/GitHub/Fall2017-project3-fall2017-project3-grp4/doc")
load("lbp.result.Rdata")
setwd("~/Documents/GitHub/Fall2017-project3-fall2017-project3-grp4/output")
load("lbp.result.Rdata")
load("hog.result.Rdata")
load("baseline.result.Rdata")
lbp.result
lbp.result$Feature<-rep("LBP",ncol(lbp.result))
hog.result$Feature<-rep("HoG",ncol(hog.result))
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
# round the accuracy rate and running time
comp$Test_accuracy <- round(comp$Test_accuracy,3)
comp$Running_Time <- round(comp$Running_Time,3)
par(mfrow=c(1,2))
ggplot(data=comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.4)+
geom_text(aes(label=Test_accuracy),color="Black",hjust=-0.2, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,1))+
#  theme_solarized(light = T)+
coord_flip()
ggplot(data=comp, aes(x=Model,y=Running_Time,color=Feature,fill=Feature)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.4)+
geom_text(aes(label=Running_Time),color="Black",hjust=-0.1, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,150))+
ylab("Running Time(secs)")+
#  theme_solarized(light = T)+
coord_flip()
ggplot(data=comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.4)+
geom_text(aes(label=Test_accuracy),color="Black",hjust=-0.2, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,1))+
theme_solarized(light = T)+
coord_flip()
ggplot(data=comp, aes(x=Model,y=Running_Time,color=Feature,fill=Feature)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.4)+
geom_text(aes(label=Running_Time),color="Black",hjust=-0.1, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,150))+
ylab("Running Time(secs)")+
theme_solarized(light = T)+
coord_flip()
par(mfrow=c(1,2))
ggplot(data=comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.4)+
geom_text(aes(label=Test_accuracy),color="Black",hjust=-0.2, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,1))+
theme_solarized(light = T)+
coord_flip()
load("lbp.result.Rdata")
load("../output/lbp.result.Rdata")
load("../output/hog.result.Rdata")
load("../output/baseline.result.Rdata")
lbp.result$Feature<-rep("LBP",ncol(lbp.result))
hog.result$Feature<-rep("HoG",ncol(hog.result))
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
# round the accuracy rate and running time
comp$Test_accuracy <- round(comp$Test_accuracy,3)
comp$Running_Time <- round(comp$Running_Time,3)
par(mfrow=c(1,2))
ggplot(data=comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.4)+
geom_text(aes(label=Test_accuracy),color="Black",hjust=-0.2, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,1))+
#theme_solarized(light = T)+
coord_flip()
ggplot(data=comp, aes(x=Model,y=Running_Time,color=Feature,fill=Feature)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.4)+
geom_text(aes(label=Running_Time),color="Black",hjust=-0.1, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,150))+
ylab("Running Time(secs)")+
#theme_solarized(light = T)+
coord_flip()
View(comp)
comp<-rbind(comp,c("GBM","Sift",1-baseline.result[[2]],1-baseline.result[[3]],baseline.result[[4]]))
comp<-rbind(comp,c("CNN","NULL",1,1,1))
comp$Parameters<-c("Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"gbm","CNN")
datatable(comp)
comp<-rbind(comp,c("GBM","Sift",1-baseline.result[[2]],1-baseline.result[[3]],baseline.result[[4]]))
comp<-rbind(comp,c("CNN","NULL",0.963,	0.842, 1924))
comp$Parameters<-c("Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"gbm","CNN")
comp<-rbind(comp,c("GBM","Sift",1-baseline.result[[2]],1-baseline.result[[3]],baseline.result[[4]]))
comp<-rbind(comp,c("CNN","NULL",0.963, 0.842, 1924))
comp$Parameters<-c("Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"gbm","CNN")
View(comp)
View(lbp.result)
View(comp)
load("../output/lbp.result.Rdata")
load("../output/hog.result.Rdata")
load("../output/baseline.result.Rdata")
lbp.result$Feature<-rep("LBP",ncol(lbp.result))
hog.result$Feature<-rep("HoG",ncol(hog.result))
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
# round the accuracy rate and running time
comp$Test_accuracy <- round(comp$Test_accuracy,3)
comp$Running_Time <- round(comp$Running_Time,3)
par(mfrow=c(1,2))
ggplot(data=comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.4)+
geom_text(aes(label=Test_accuracy),color="Black",hjust=-0.2, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,1))+
#theme_solarized(light = T)+
coord_flip()
ggplot(data=comp, aes(x=Model,y=Running_Time,color=Feature,fill=Feature)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.4)+
geom_text(aes(label=Running_Time),color="Black",hjust=-0.1, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,150))+
ylab("Running Time(secs)")+
#theme_solarized(light = T)+
coord_flip()
comp<-rbind(comp,c("GBM","Sift",1-baseline.result[[2]],1-baseline.result[[3]],baseline.result[[4]]))
View(comp)
comp<-rbind(comp,c("CNN","CNN",0.963, 0.842, 1924))
comp$Parameters<-c("Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"Ntree=","Multinomial","Cost= , Margin= " , "GBM",
"gbm","CNN")
datatable(comp)
View(comp)
View(comp)
comp<-rbind(comp,c("GBM","Sift",1-baseline.result[[2]],1-baseline.result[[3]],baseline.result[[4]]))
comp<-rbind(comp,c("CNN","CNN",0.963, 0.842, 1924))
datatable(comp)
load("../output/lbp.result.Rdata")
load("../output/hog.result.Rdata")
load("../output/baseline.result.Rdata")
lbp.result$Feature<-rep("LBP",ncol(lbp.result))
hog.result$Feature<-rep("HoG",ncol(hog.result))
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
# round the accuracy rate and running time
comp$Test_accuracy <- round(comp$Test_accuracy,3)
comp$Running_Time <- round(comp$Running_Time,3)
par(mfrow=c(1,2))
ggplot(data=comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.4)+
geom_text(aes(label=Test_accuracy),color="Black",hjust=-0.2, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,1))+
#theme_solarized(light = T)+
coord_flip()
ggplot(data=comp, aes(x=Model,y=Running_Time,color=Feature,fill=Feature)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.4)+
geom_text(aes(label=Running_Time),color="Black",hjust=-0.1, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,150))+
ylab("Running Time(secs)")+
#theme_solarized(light = T)+
coord_flip()
comp<-rbind(comp,c("GBM","Sift",1-baseline.result[[2]],1-baseline.result[[3]],baseline.result[[4]]))
comp<-rbind(comp,c("CNN","CNN",0.963, 0.842, 1924))
datatable(comp)
View(comp)
load("../output/lbp.result.Rdata")
load("../output/hog.result.Rdata")
load("../output/baseline.result.Rdata")
lbp.result$Feature<-rep("LBP",ncol(lbp.result))
hog.result$Feature<-rep("HoG",ncol(hog.result))
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
# round the accuracy rate and running time
comp$Test_accuracy <- round(comp$Test_accuracy,3)
comp$Running_Time <- round(comp$Running_Time,3)
par(mfrow=c(1,2))
ggplot(data=comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.4)+
geom_text(aes(label=Test_accuracy),color="Black",hjust=-0.2, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,1))+
#theme_solarized(light = T)+
coord_flip()
ggplot(data=comp, aes(x=Model,y=Running_Time,color=Feature,fill=Feature)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.4)+
geom_text(aes(label=Running_Time),color="Black",hjust=-0.1, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,150))+
ylab("Running Time(secs)")+
#theme_solarized(light = T)+
coord_flip()
View(hog.result)
comp<-rbind(comp,c("GBM","Sift",1-baseline.result[[2]],1-baseline.result[[3]],baseline.result[[4]]))
View(comp)
View(comp)
comp<-rbind(comp,c("CNN","CNN",0.963, 0.842, 1924))
View(comp)
load("../output/lbp.result.Rdata")
load("../output/hog.result.Rdata")
load("../output/baseline.result.Rdata")
lbp.result$Feature<-rep("LBP",ncol(lbp.result))
hog.result$Feature<-rep("HoG",ncol(hog.result))
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
# round the accuracy rate and running time
comp$Test_accuracy <- round(comp$Test_accuracy,3)
comp$Running_Time <- round(comp$Running_Time,3)
par(mfrow=c(1,2))
ggplot(data=comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.4)+
geom_text(aes(label=Test_accuracy),color="Black",hjust=-0.2, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,1))+
#theme_solarized(light = T)+
coord_flip()
ggplot(data=comp, aes(x=Model,y=Running_Time,color=Feature,fill=Feature)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.4)+
geom_text(aes(label=Running_Time),color="Black",hjust=-0.1, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,150))+
ylab("Running Time(secs)")+
#theme_solarized(light = T)+
coord_flip()
View(comp)
comp<-rbind(comp,c("GBM","Sift",1-baseline.result[[2]],1-baseline.result[[3]],baseline.result[[4]]))
View(comp)
comp<-rbind(comp,c("CNN","CNN",0.963, 0.842,1924))
str(comp)
load("../output/lbp.result.Rdata")
load("../output/hog.result.Rdata")
load("../output/baseline.result.Rdata")
lbp.result$Feature<-rep("LBP",ncol(lbp.result))
hog.result$Feature<-rep("HoG",ncol(hog.result))
comp<-rbind(lbp.result,hog.result)
comp<-comp[,c(1,5,2,3,4)]
# round the accuracy rate and running time
comp$Test_accuracy <- round(comp$Test_accuracy,3)
comp$Running_Time <- round(comp$Running_Time,3)
par(mfrow=c(1,2))
ggplot(data=comp, aes(x=Model,y=Test_accuracy,color=Feature,fill=Feature)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.4)+
geom_text(aes(label=Test_accuracy),color="Black",hjust=-0.2, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,1))+
#theme_solarized(light = T)+
coord_flip()
ggplot(data=comp, aes(x=Model,y=Running_Time,color=Feature,fill=Feature)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.4)+
geom_text(aes(label=Running_Time),color="Black",hjust=-0.1, position = position_dodge(0.5))+
theme_bw()+
scale_y_continuous(limits = c(0,150))+
ylab("Running Time(secs)")+
#theme_solarized(light = T)+
coord_flip()
comp[,1] = as.character(comp[,1])
View(comp)
comp<-rbind(comp,c("CNN","CNN",0.963, 0.842,1924))
View(comp)
